// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

/// Defines the operations supported by the API.
///
/// This protocol defines all of the operations supported by the API. It is implemented by ``Client`` which can be used to make these API requests and handle their responses.
///
/// ## Topics
///
/// ### API calls
///
/// These methods allow you to make requests to the API.
///
///
/// ### Scoped API calls
///
/// These properties logically group other parts of the API.
///
/// - ``stream``
/// - ``multistreamTarget``
/// - ``webhook``
/// - ``asset``
/// - ``room``
/// - ``metrics``
/// - ``session``
/// - ``accessControl``
/// - ``task``
/// - ``transcode``
/// - ``playback``
///
public protocol LivepeerAPI {

    // MARK: - Scoped APIs
    var stream: StreamAPI { get }
    var multistreamTarget: MultistreamTargetAPI { get }
    var webhook: WebhookAPI { get }
    var asset: AssetAPI { get }
    var room: RoomAPI { get }
    var metrics: MetricsAPI { get }
    var session: SessionAPI { get }
    var accessControl: AccessControlAPI { get }
    var task: TaskAPI { get }
    var transcode: TranscodeAPI { get }
    var playback: PlaybackAPI { get }
}

// MARK: - StreamAPI
/// ## Topics
///
/// ### API calls
///
/// - ``getAll(request:)``
/// - ``create(request:)``
/// - ``delete(request:)``
/// - ``get(request:)``
/// - ``update(request:)``
/// - ``createClip(request:)``
/// - ``getAllClips(request:)``
///
public protocol StreamAPI {
    /// Retrieve streams
    /// 
    /// - Parameter request: A ``Operations/GetAllRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GetAllResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func getAll(request: Operations.GetAllRequest) async throws -> Response<Operations.GetAllResponse>

    /// Create a stream
    /// 
    /// - Parameter request: A ``Shared/NewStreamPayload`` object describing the input to the API operation
    /// - Returns: A ``Operations/CreateResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func create(request: Shared.NewStreamPayload) async throws -> Response<Operations.CreateResponse>

    /// Delete a stream
    /// 
    /// - Parameter request: A ``Operations/DeleteRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/DeleteResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func delete(request: Operations.DeleteRequest) async throws -> Response<Operations.DeleteResponse>

    /// Retrieve a stream
    /// 
    /// - Parameter request: A ``Operations/GetRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GetResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func get(request: Operations.GetRequest) async throws -> Response<Operations.GetResponse>

    /// Update a stream
    /// 
    /// - Parameter request: A ``Operations/UpdateRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/UpdateResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func update(request: Operations.UpdateRequest) async throws -> Response<Operations.UpdateResponse>

    /// Create a clip from a livestream
    /// 
    /// 
    /// - Parameter request: A ``Shared/ClipPayload`` object describing the input to the API operation
    /// - Returns: A ``Operations/CreateClipResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func createClip(request: Shared.ClipPayload) async throws -> Response<Operations.CreateClipResponse>

    /// Retrieve clips of a livestream
    /// 
    /// - Parameter request: A ``Operations/GetAllClipsRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GetAllClipsResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func getAllClips(request: Operations.GetAllClipsRequest) async throws -> Response<Operations.GetAllClipsResponse>
}

// MARK: - MultistreamTargetAPI
/// ## Topics
///
/// ### API calls
///
/// - ``getMultistreamTargets()``
/// - ``createMultistreamTarget(request:)``
/// - ``deleteMultistreamTarget(request:)``
/// - ``getMultistreamTarget(request:)``
/// - ``updateMultistreamTarget(request:)``
///
public protocol MultistreamTargetAPI {
    /// Retrieve Multistream Targets
    /// 
    /// - Returns: A ``Operations/GetMultistreamTargetsResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func getMultistreamTargets() async throws -> Response<Operations.GetMultistreamTargetsResponse>

    /// Create a multistream target
    /// 
    /// - Parameter request: A ``Shared/MultistreamTargetInput`` object describing the input to the API operation
    /// - Returns: A ``Operations/CreateMultistreamTargetResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func createMultistreamTarget(request: Shared.MultistreamTargetInput) async throws -> Response<Operations.CreateMultistreamTargetResponse>

    /// Delete a multistream target
    /// 
    /// - Parameter request: A ``Operations/DeleteMultistreamTargetRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/DeleteMultistreamTargetResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func deleteMultistreamTarget(request: Operations.DeleteMultistreamTargetRequest) async throws -> Response<Operations.DeleteMultistreamTargetResponse>

    /// Retrieve a multistream target
    /// 
    /// - Parameter request: A ``Operations/GetMultistreamTargetRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GetMultistreamTargetResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func getMultistreamTarget(request: Operations.GetMultistreamTargetRequest) async throws -> Response<Operations.GetMultistreamTargetResponse>

    /// Update Multistream Target
    /// 
    /// - Parameter request: A ``Operations/UpdateMultistreamTargetRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/UpdateMultistreamTargetResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func updateMultistreamTarget(request: Operations.UpdateMultistreamTargetRequest) async throws -> Response<Operations.UpdateMultistreamTargetResponse>
}

// MARK: - WebhookAPI
/// ## Topics
///
/// ### API calls
///
/// - ``getWebhooks()``
/// - ``createWebhook()``
/// - ``deleteWebhook(request:)``
/// - ``getWebhook(request:)``
/// - ``updateWebhook(request:)``
///
public protocol WebhookAPI {
    /// Retrieve a Webhook
    /// 
    /// - Returns: A ``Operations/GetWebhooksResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func getWebhooks() async throws -> Response<Operations.GetWebhooksResponse>

    /// Create a webhook
    /// 
    /// - Returns: A ``Operations/CreateWebhookResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func createWebhook() async throws -> Response<Operations.CreateWebhookResponse>

    /// Delete a webhook
    /// 
    /// - Parameter request: A ``Operations/DeleteWebhookRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/DeleteWebhookResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func deleteWebhook(request: Operations.DeleteWebhookRequest) async throws -> Response<Operations.DeleteWebhookResponse>

    /// Retrieve a webhook
    /// 
    /// - Parameter request: A ``Operations/GetWebhookRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GetWebhookResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func getWebhook(request: Operations.GetWebhookRequest) async throws -> Response<Operations.GetWebhookResponse>

    /// Update a webhook
    /// 
    /// - Parameter request: A ``Operations/UpdateWebhookRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/UpdateWebhookResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func updateWebhook(request: Operations.UpdateWebhookRequest) async throws -> Response<Operations.UpdateWebhookResponse>
}

// MARK: - AssetAPI
/// ## Topics
///
/// ### API calls
///
/// - ``getAssets()``
/// - ``requestUpload(request:)``
/// - ``uploadAssetViaURL(request:)``
/// - ``deleteAsset(request:)``
/// - ``getAsset(request:)``
/// - ``patchAssetAssetId(request:)``
///
public protocol AssetAPI {
    /// Retrieve assets
    /// 
    /// - Returns: A ``Operations/GetAssetsResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func getAssets() async throws -> Response<Operations.GetAssetsResponse>

    /// Upload an asset
    /// 
    /// - Parameter request: A ``Shared/NewAssetPayload`` object describing the input to the API operation
    /// - Returns: A ``Operations/RequestUploadResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func requestUpload(request: Shared.NewAssetPayload) async throws -> Response<Operations.RequestUploadResponse>

    /// Upload asset via URL
    /// 
    /// - Parameter request: A ``Shared/NewAssetPayload`` object describing the input to the API operation
    /// - Returns: A ``Operations/UploadAssetViaURLResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func uploadAssetViaURL(request: Shared.NewAssetPayload) async throws -> Response<Operations.UploadAssetViaURLResponse>

    /// Delete an asset
    /// 
    /// - Parameter request: A ``Operations/DeleteAssetRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/DeleteAssetResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func deleteAsset(request: Operations.DeleteAssetRequest) async throws -> Response<Operations.DeleteAssetResponse>

    /// Retrieves an asset
    /// 
    /// - Parameter request: A ``Operations/GetAssetRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GetAssetResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func getAsset(request: Operations.GetAssetRequest) async throws -> Response<Operations.GetAssetResponse>

    /// Update an asset
    /// 
    /// - Parameter request: A ``Operations/PatchAssetAssetIdRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/PatchAssetAssetIdResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func patchAssetAssetId(request: Operations.PatchAssetAssetIdRequest) async throws -> Response<Operations.PatchAssetAssetIdResponse>
}

// MARK: - RoomAPI
/// ## Topics
///
/// ### API calls
///
/// - ``createRoom()``
/// - ``deleteRoom(request:)``
/// - ``getRoom(request:)``
/// - ``stopRoomEgress(request:)``
/// - ``startRoomEgress(request:)``
/// - ``createRoomUser(request:)``
/// - ``deleteRoomUser(request:)``
/// - ``getRoomUserDetails(request:)``
/// - ``updateRoomUserDetails(request:)``
///
public protocol RoomAPI {
    /// Create a room
    /// 
    /// - Returns: A ``Operations/CreateRoomResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func createRoom() async throws -> Response<Operations.CreateRoomResponse>

    /// Delete a room
    /// 
    /// - Parameter request: A ``Operations/DeleteRoomRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/DeleteRoomResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func deleteRoom(request: Operations.DeleteRoomRequest) async throws -> Response<Operations.DeleteRoomResponse>

    /// Retrieve a room
    /// 
    /// - Parameter request: A ``Operations/GetRoomRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GetRoomResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func getRoom(request: Operations.GetRoomRequest) async throws -> Response<Operations.GetRoomResponse>

    /// Stop room RTMP egress
    /// 
    /// - Parameter request: A ``Operations/StopRoomEgressRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/StopRoomEgressResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func stopRoomEgress(request: Operations.StopRoomEgressRequest) async throws -> Response<Operations.StopRoomEgressResponse>

    /// Start room RTMP egress
    /// 
    /// - Parameter request: A ``Operations/StartRoomEgressRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/StartRoomEgressResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func startRoomEgress(request: Operations.StartRoomEgressRequest) async throws -> Response<Operations.StartRoomEgressResponse>

    /// Create a room user
    /// 
    /// - Parameter request: A ``Operations/CreateRoomUserRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/CreateRoomUserResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func createRoomUser(request: Operations.CreateRoomUserRequest) async throws -> Response<Operations.CreateRoomUserResponse>

    /// Remove a user from the room
    /// 
    /// - Parameter request: A ``Operations/DeleteRoomUserRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/DeleteRoomUserResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func deleteRoomUser(request: Operations.DeleteRoomUserRequest) async throws -> Response<Operations.DeleteRoomUserResponse>

    /// Get user details
    /// 
    /// - Parameter request: A ``Operations/GetRoomUserDetailsRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GetRoomUserDetailsResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func getRoomUserDetails(request: Operations.GetRoomUserDetailsRequest) async throws -> Response<Operations.GetRoomUserDetailsResponse>

    /// Update a room user
    /// 
    /// - Parameter request: A ``Operations/UpdateRoomUserDetailsRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/UpdateRoomUserDetailsResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func updateRoomUserDetails(request: Operations.UpdateRoomUserDetailsRequest) async throws -> Response<Operations.UpdateRoomUserDetailsResponse>
}

// MARK: - MetricsAPI
/// ## Topics
///
/// ### API calls
///
/// - ``getViewershipsMetrics(request:)``
/// - ``getCreatorMetrics(request:)``
/// - ``getPublicTotalViewsMetrics(request:)``
/// - ``getUsageMetrics(request:)``
///
public protocol MetricsAPI {
    /// Query viewership metrics
    /// 
    /// - Parameter request: A ``Operations/GetViewershipsMetricsRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GetViewershipsMetricsResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func getViewershipsMetrics(request: Operations.GetViewershipsMetricsRequest) async throws -> Response<Operations.GetViewershipsMetricsResponse>

    /// Query creator viewership metrics
    /// 
    /// - Parameter request: A ``Operations/GetCreatorMetricsRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GetCreatorMetricsResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func getCreatorMetrics(request: Operations.GetCreatorMetricsRequest) async throws -> Response<Operations.GetCreatorMetricsResponse>

    /// Query public total views metrics
    /// 
    /// - Parameter request: A ``Operations/GetPublicTotalViewsMetricsRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GetPublicTotalViewsMetricsResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func getPublicTotalViewsMetrics(request: Operations.GetPublicTotalViewsMetricsRequest) async throws -> Response<Operations.GetPublicTotalViewsMetricsResponse>

    /// Query usage metrics
    /// 
    /// - Parameter request: A ``Operations/GetUsageMetricsRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GetUsageMetricsResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func getUsageMetrics(request: Operations.GetUsageMetricsRequest) async throws -> Response<Operations.GetUsageMetricsResponse>
}

// MARK: - SessionAPI
/// ## Topics
///
/// ### API calls
///
/// - ``getSessions()``
/// - ``getSession(request:)``
/// - ``getRecordedSessions(request:)``
///
public protocol SessionAPI {
    /// Retrieve sessions
    /// 
    /// - Returns: A ``Operations/GetSessionsResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func getSessions() async throws -> Response<Operations.GetSessionsResponse>

    /// Retrieve a session
    /// 
    /// - Parameter request: A ``Operations/GetSessionRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GetSessionResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func getSession(request: Operations.GetSessionRequest) async throws -> Response<Operations.GetSessionResponse>

    /// Retrieve Recorded Sessions
    /// 
    /// - Parameter request: A ``Operations/GetRecordedSessionsRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GetRecordedSessionsResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func getRecordedSessions(request: Operations.GetRecordedSessionsRequest) async throws -> Response<Operations.GetRecordedSessionsResponse>
}

// MARK: - AccessControlAPI
/// ## Topics
///
/// ### API calls
///
/// - ``getSigningKeys()``
/// - ``createSigningKey()``
/// - ``deleteSigningKey(request:)``
/// - ``getSigningKey(request:)``
/// - ``updateSigningKey(request:)``
///
public protocol AccessControlAPI {
    /// Retrieves signing keys
    /// 
    /// - Returns: A ``Operations/GetSigningKeysResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func getSigningKeys() async throws -> Response<Operations.GetSigningKeysResponse>

    /// Create a signing key
    /// 
    /// - Returns: A ``Operations/CreateSigningKeyResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func createSigningKey() async throws -> Response<Operations.CreateSigningKeyResponse>

    /// Delete Signing Key
    /// 
    /// - Parameter request: A ``Operations/DeleteSigningKeyRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/DeleteSigningKeyResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func deleteSigningKey(request: Operations.DeleteSigningKeyRequest) async throws -> Response<Operations.DeleteSigningKeyResponse>

    /// Retrieves a signing key
    /// 
    /// - Parameter request: A ``Operations/GetSigningKeyRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GetSigningKeyResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func getSigningKey(request: Operations.GetSigningKeyRequest) async throws -> Response<Operations.GetSigningKeyResponse>

    /// Update a signing key
    /// 
    /// - Parameter request: A ``Operations/UpdateSigningKeyRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/UpdateSigningKeyResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func updateSigningKey(request: Operations.UpdateSigningKeyRequest) async throws -> Response<Operations.UpdateSigningKeyResponse>
}

// MARK: - TaskAPI
/// ## Topics
///
/// ### API calls
///
/// - ``getTasks()``
/// - ``getTask(request:)``
///
public protocol TaskAPI {
    /// Retrieve Tasks
    /// 
    /// - Returns: A ``Operations/GetTasksResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func getTasks() async throws -> Response<Operations.GetTasksResponse>

    /// Retrieve a Task
    /// 
    /// - Parameter request: A ``Operations/GetTaskRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GetTaskResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func getTask(request: Operations.GetTaskRequest) async throws -> Response<Operations.GetTaskResponse>
}

// MARK: - TranscodeAPI
/// ## Topics
///
/// ### API calls
///
/// - ``transcode(request:)``
///
public protocol TranscodeAPI {
    /// Transcode a video
    /// 
    /// - Parameter request: A ``Shared/TaskInput`` object describing the input to the API operation
    /// - Returns: A ``Operations/TranscodeResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func transcode(request: Shared.TaskInput) async throws -> Response<Operations.TranscodeResponse>
}

// MARK: - PlaybackAPI
/// ## Topics
///
/// ### API calls
///
/// - ``getPlaybackInfo(request:)``
///
public protocol PlaybackAPI {
    /// Retrieve Playback Info
    /// 
    /// - Parameter request: A ``Operations/GetPlaybackInfoRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GetPlaybackInfoResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``LivepeerError``
    func getPlaybackInfo(request: Operations.GetPlaybackInfoRequest) async throws -> Response<Operations.GetPlaybackInfoResponse>
}

// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Operations {
    /// A simplified metric object about aggregate viewership of an
    /// asset. Either playbackId or dStorageUrl will be set.
    /// 
    public struct GetPublicTotalViewsMetricsResponseBody {
        /// The total playtime in minutes for the asset
        @DecimalSerialized
        public private(set) var playtimeMins: Double
        /// The number of views for the asset
        public let viewCount: Int
        /// The URL of the distributed storage used for the asset
        public let dStorageUrl: String?
        /// The playback ID associated with the metric
        public let playbackId: String?

        /// Creates an object with the specified parameters
        ///
        /// - Parameter playtimeMins: The total playtime in minutes for the asset
        /// - Parameter viewCount: The number of views for the asset
        /// - Parameter dStorageUrl: The URL of the distributed storage used for the asset
        /// - Parameter playbackId: The playback ID associated with the metric
        ///
        public init(playtimeMins: Double, viewCount: Int, dStorageUrl: String? = nil, playbackId: String? = nil) {
            self._playtimeMins = DecimalSerialized<Double>(wrappedValue: playtimeMins)
            self.viewCount = viewCount
            self.dStorageUrl = dStorageUrl
            self.playbackId = playbackId
        }
    }
}

extension Operations.GetPublicTotalViewsMetricsResponseBody: Codable {
    enum CodingKeys: String, CodingKey {
        case playtimeMins
        case viewCount
        case dStorageUrl
        case playbackId
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self._playtimeMins = try container.decode(DecimalSerialized<Double>.self, forKey: .playtimeMins)
        self.viewCount = try container.decode(Int.self, forKey: .viewCount)
        self.dStorageUrl = try container.decodeIfPresent(String.self, forKey: .dStorageUrl)
        self.playbackId = try container.decodeIfPresent(String.self, forKey: .playbackId)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self._playtimeMins, forKey: .playtimeMins)
        try container.encode(self.viewCount, forKey: .viewCount)
        try container.encodeIfPresent(self.dStorageUrl, forKey: .dStorageUrl)
        try container.encodeIfPresent(self.playbackId, forKey: .playbackId)
    }
}

extension Operations.GetPublicTotalViewsMetricsResponseBody {
    var playtimeMinsWrapper: DecimalSerialized<Double> {
        return _playtimeMins
    }
}

// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// A model object
    public struct MultistreamTargetPatchPayload {
        /// Livepeer-compatible multistream target URL (RTMP(S) or SRT)
        public let url: String
        /// If true then this multistream target will not be used for pushing
        /// even if it is configured in a stream object.
        /// 
        public let disabled: Bool?
        public let name: String?

        /// Creates an object with the specified parameters
        ///
        /// - Parameter url: Livepeer-compatible multistream target URL (RTMP(S) or SRT)
        /// - Parameter disabled: If true then this multistream target will not be used for pushing
        /// even if it is configured in a stream object.
        /// 
        ///
        public init(url: String, disabled: Bool? = nil, name: String? = nil) {
            self.url = url
            self.disabled = disabled
            self.name = name
        }
    }
}

extension Shared.MultistreamTargetPatchPayload: Codable {
    enum CodingKeys: String, CodingKey {
        case url
        case disabled
        case name
    }
}


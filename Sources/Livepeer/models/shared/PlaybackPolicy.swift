// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// Whether the playback policy for a asset or stream is public or signed
    public struct PlaybackPolicy {
        public let type: Shared.TypeModel
        /// User-defined webhook context
        public let webhookContext: [String: AnyValue]?
        /// ID of the webhook to use for playback policy
        public let webhookId: String?

        /// Creates an object with the specified parameters
        ///
        /// - Parameter webhookContext: User-defined webhook context
        /// - Parameter webhookId: ID of the webhook to use for playback policy
        ///
        public init(type: Shared.TypeModel, webhookContext: [String: AnyValue]? = nil, webhookId: String? = nil) {
            self.type = type
            self.webhookContext = webhookContext
            self.webhookId = webhookId
        }
    }
}

extension Shared.PlaybackPolicy: Codable {
    enum CodingKeys: String, CodingKey {
        case type
        case webhookContext
        case webhookId
    }
}


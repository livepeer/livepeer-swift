// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// A model object
    public struct AssetIpfs {
        public let dollarRef: AnyValue?
        public let nftMetadata: Shared.IpfsFileInfo?
        public let spec: Shared.AssetSpec?
        /// Timestamp (in milliseconds) at which IPFS export task was
        /// updated
        /// 
        @DecimalSerialized
        public private(set) var updatedAt: Double?

        /// Creates an object with the specified parameters
        ///
        /// - Parameter updatedAt: Timestamp (in milliseconds) at which IPFS export task was
        /// updated
        /// 
        ///
        public init(dollarRef: AnyValue? = nil, nftMetadata: Shared.IpfsFileInfo? = nil, spec: Shared.AssetSpec? = nil, updatedAt: Double? = nil) {
            self.dollarRef = dollarRef
            self.nftMetadata = nftMetadata
            self.spec = spec
            self._updatedAt = DecimalSerialized<Double?>(wrappedValue: updatedAt)
        }
    }
}

extension Shared.AssetIpfs: Codable {
    enum CodingKeys: String, CodingKey {
        case dollarRef = "$ref"
        case nftMetadata
        case spec
        case updatedAt
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.dollarRef = try container.decodeIfPresent(AnyValue.self, forKey: .dollarRef)
        self.nftMetadata = try container.decodeIfPresent(Shared.IpfsFileInfo.self, forKey: .nftMetadata)
        self.spec = try container.decodeIfPresent(Shared.AssetSpec.self, forKey: .spec)
        self._updatedAt = try container.decodeIfPresent(DecimalSerialized<Double?>.self, forKey: .updatedAt) ?? DecimalSerialized<Double?>(wrappedValue: nil)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(self.dollarRef, forKey: .dollarRef)
        try container.encodeIfPresent(self.nftMetadata, forKey: .nftMetadata)
        try container.encodeIfPresent(self.spec, forKey: .spec)
        if self.updatedAt != nil {
            try container.encode(self._updatedAt, forKey: .updatedAt)
        }
    }
}

extension Shared.AssetIpfs {
    var updatedAtWrapper: DecimalSerialized<Double?> {
        return _updatedAt
    }
}

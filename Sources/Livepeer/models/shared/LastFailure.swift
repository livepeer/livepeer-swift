// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// failure timestamp and error message with status code
    public struct LastFailure {
        /// Webhook failure error message
        public let error: String?
        /// Webhook failure response
        public let response: String?
        /// Webhook failure status code
        @DecimalSerialized
        public private(set) var statusCode: Double?
        /// Timestamp (in milliseconds) at which the webhook last failed
        @DecimalSerialized
        public private(set) var timestamp: Double?

        /// Creates an object with the specified parameters
        ///
        /// - Parameter error: Webhook failure error message
        /// - Parameter response: Webhook failure response
        /// - Parameter statusCode: Webhook failure status code
        /// - Parameter timestamp: Timestamp (in milliseconds) at which the webhook last failed
        ///
        public init(error: String? = nil, response: String? = nil, statusCode: Double? = nil, timestamp: Double? = nil) {
            self.error = error
            self.response = response
            self._statusCode = DecimalSerialized<Double?>(wrappedValue: statusCode)
            self._timestamp = DecimalSerialized<Double?>(wrappedValue: timestamp)
        }
    }
}

extension Shared.LastFailure: Codable {
    enum CodingKeys: String, CodingKey {
        case error
        case response
        case statusCode
        case timestamp
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.error = try container.decodeIfPresent(String.self, forKey: .error)
        self.response = try container.decodeIfPresent(String.self, forKey: .response)
        self._statusCode = try container.decodeIfPresent(DecimalSerialized<Double?>.self, forKey: .statusCode) ?? DecimalSerialized<Double?>(wrappedValue: nil)
        self._timestamp = try container.decodeIfPresent(DecimalSerialized<Double?>.self, forKey: .timestamp) ?? DecimalSerialized<Double?>(wrappedValue: nil)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(self.error, forKey: .error)
        try container.encodeIfPresent(self.response, forKey: .response)
        if self.statusCode != nil {
            try container.encode(self._statusCode, forKey: .statusCode)
        }
        if self.timestamp != nil {
            try container.encode(self._timestamp, forKey: .timestamp)
        }
    }
}

extension Shared.LastFailure {
    var timestampWrapper: DecimalSerialized<Double?> {
        return _timestamp
    }
    var statusCodeWrapper: DecimalSerialized<Double?> {
        return _statusCode
    }
}

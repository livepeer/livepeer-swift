// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// A model object
    public enum IpfsExportParamsPinata {
        case ipfsExportParams1Output(Shared.IpfsExportParams1Output)
        case ipfsExportParams2Output(Shared.IpfsExportParams2Output)
    }
}

extension Shared.IpfsExportParamsPinata: Codable {
    public init(from decoder: Decoder) throws {
        if let value = try? Shared.IpfsExportParams1Output(from: decoder) {
            self = .ipfsExportParams1Output(value)
        } else if let value = try? Shared.IpfsExportParams2Output(from: decoder) {
            self = .ipfsExportParams2Output(value)
        } else {
            throw LivepeerError.failedToHandleResponse(.failedToDecodeResponse)
        }
    }

    public func encode(to encoder: Encoder) throws {
        switch self {
        case .ipfsExportParams1Output(let value):
            try value.encode(to: encoder)
        case .ipfsExportParams2Output(let value):
            try value.encode(to: encoder)
        }
    }
}


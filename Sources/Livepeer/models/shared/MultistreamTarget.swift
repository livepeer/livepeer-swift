// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// A model object
    public struct MultistreamTarget {
        /// Timestamp (in milliseconds) at which multistream target object was
        /// created
        /// 
        @DecimalSerialized
        public private(set) var createdAt: Double?
        /// If true then this multistream target will not be used for pushing
        /// even if it is configured in a stream object.
        /// 
        public let disabled: Bool?
        public let id: String?
        public let name: String?

        /// Creates an object with the specified parameters
        ///
        /// - Parameter createdAt: Timestamp (in milliseconds) at which multistream target object was
        /// created
        /// 
        /// - Parameter disabled: If true then this multistream target will not be used for pushing
        /// even if it is configured in a stream object.
        /// 
        ///
        public init(createdAt: Double? = nil, disabled: Bool? = nil, id: String? = nil, name: String? = nil) {
            self._createdAt = DecimalSerialized<Double?>(wrappedValue: createdAt)
            self.disabled = disabled
            self.id = id
            self.name = name
        }
    }
}

extension Shared.MultistreamTarget: Codable {
    enum CodingKeys: String, CodingKey {
        case createdAt
        case disabled
        case id
        case name
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self._createdAt = try container.decodeIfPresent(DecimalSerialized<Double?>.self, forKey: .createdAt) ?? DecimalSerialized<Double?>(wrappedValue: nil)
        self.disabled = try container.decodeIfPresent(Bool.self, forKey: .disabled)
        self.id = try container.decodeIfPresent(String.self, forKey: .id)
        self.name = try container.decodeIfPresent(String.self, forKey: .name)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if self.createdAt != nil {
            try container.encode(self._createdAt, forKey: .createdAt)
        }
        try container.encodeIfPresent(self.disabled, forKey: .disabled)
        try container.encodeIfPresent(self.id, forKey: .id)
        try container.encodeIfPresent(self.name, forKey: .name)
    }
}

extension Shared.MultistreamTarget {
    var createdAtWrapper: DecimalSerialized<Double?> {
        return _createdAt
    }
}

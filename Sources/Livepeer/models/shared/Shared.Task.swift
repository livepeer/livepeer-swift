// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// A model object
    public struct Task {
        public let clip: Shared.Clip?
        /// Timestamp (in milliseconds) at which task was created
        @DecimalSerialized
        public private(set) var createdAt: Double?
        /// Task ID
        public let id: String?
        /// ID of the input asset
        public let inputAssetId: String?
        /// Output of the task
        public let output: Shared.Output?
        /// ID of the output asset
        public let outputAssetId: String?
        /// Parameters of the task
        public let params: Shared.TaskParams?
        /// Timestamp (in milliseconds) at which the task was scheduled for
        /// execution (e.g. after file upload finished).
        /// 
        @DecimalSerialized
        public private(set) var scheduledAt: Double?
        /// Status of the task
        public let status: Shared.TaskStatus?
        /// Type of the task
        public let type: Shared.TaskType?

        /// Creates an object with the specified parameters
        ///
        /// - Parameter createdAt: Timestamp (in milliseconds) at which task was created
        /// - Parameter id: Task ID
        /// - Parameter inputAssetId: ID of the input asset
        /// - Parameter output: Output of the task
        /// - Parameter outputAssetId: ID of the output asset
        /// - Parameter params: Parameters of the task
        /// - Parameter scheduledAt: Timestamp (in milliseconds) at which the task was scheduled for
        /// execution (e.g. after file upload finished).
        /// 
        /// - Parameter status: Status of the task
        /// - Parameter type: Type of the task
        ///
        public init(clip: Shared.Clip? = nil, createdAt: Double? = nil, id: String? = nil, inputAssetId: String? = nil, output: Shared.Output? = nil, outputAssetId: String? = nil, params: Shared.TaskParams? = nil, scheduledAt: Double? = nil, status: Shared.TaskStatus? = nil, type: Shared.TaskType? = nil) {
            self.clip = clip
            self._createdAt = DecimalSerialized<Double?>(wrappedValue: createdAt)
            self.id = id
            self.inputAssetId = inputAssetId
            self.output = output
            self.outputAssetId = outputAssetId
            self.params = params
            self._scheduledAt = DecimalSerialized<Double?>(wrappedValue: scheduledAt)
            self.status = status
            self.type = type
        }
    }
}

extension Shared.Task: Codable {
    enum CodingKeys: String, CodingKey {
        case clip
        case createdAt
        case id
        case inputAssetId
        case output
        case outputAssetId
        case params
        case scheduledAt
        case status
        case type
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.clip = try container.decodeIfPresent(Shared.Clip.self, forKey: .clip)
        self._createdAt = try container.decodeIfPresent(DecimalSerialized<Double?>.self, forKey: .createdAt) ?? DecimalSerialized<Double?>(wrappedValue: nil)
        self.id = try container.decodeIfPresent(String.self, forKey: .id)
        self.inputAssetId = try container.decodeIfPresent(String.self, forKey: .inputAssetId)
        self.output = try container.decodeIfPresent(Shared.Output.self, forKey: .output)
        self.outputAssetId = try container.decodeIfPresent(String.self, forKey: .outputAssetId)
        self.params = try container.decodeIfPresent(Shared.TaskParams.self, forKey: .params)
        self._scheduledAt = try container.decodeIfPresent(DecimalSerialized<Double?>.self, forKey: .scheduledAt) ?? DecimalSerialized<Double?>(wrappedValue: nil)
        self.status = try container.decodeIfPresent(Shared.TaskStatus.self, forKey: .status)
        self.type = try container.decodeIfPresent(Shared.TaskType.self, forKey: .type)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(self.clip, forKey: .clip)
        if self.createdAt != nil {
            try container.encode(self._createdAt, forKey: .createdAt)
        }
        try container.encodeIfPresent(self.id, forKey: .id)
        try container.encodeIfPresent(self.inputAssetId, forKey: .inputAssetId)
        try container.encodeIfPresent(self.output, forKey: .output)
        try container.encodeIfPresent(self.outputAssetId, forKey: .outputAssetId)
        try container.encodeIfPresent(self.params, forKey: .params)
        if self.scheduledAt != nil {
            try container.encode(self._scheduledAt, forKey: .scheduledAt)
        }
        try container.encodeIfPresent(self.status, forKey: .status)
        try container.encodeIfPresent(self.type, forKey: .type)
    }
}

extension Shared.Task {
    var createdAtWrapper: DecimalSerialized<Double?> {
        return _createdAt
    }
    var scheduledAtWrapper: DecimalSerialized<Double?> {
        return _scheduledAt
    }
}

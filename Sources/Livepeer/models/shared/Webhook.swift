// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// A model object
    public struct Webhook {
        public let name: String
        public let url: String
        /// Timestamp (in milliseconds) at which stream object was created
        @DecimalSerialized
        public private(set) var createdAt: Double?
        public let events: [Shared.Events]?
        public let id: String?
        /// status of webhook
        public let status: Shared.Status?
        /// streamId of the stream on which the webhook is applied
        public let streamId: String?

        /// Creates an object with the specified parameters
        ///
        /// - Parameter createdAt: Timestamp (in milliseconds) at which stream object was created
        /// - Parameter status: status of webhook
        /// - Parameter streamId: streamId of the stream on which the webhook is applied
        ///
        public init(name: String, url: String, createdAt: Double? = nil, events: [Shared.Events]? = nil, id: String? = nil, status: Shared.Status? = nil, streamId: String? = nil) {
            self.name = name
            self.url = url
            self._createdAt = DecimalSerialized<Double?>(wrappedValue: createdAt)
            self.events = events
            self.id = id
            self.status = status
            self.streamId = streamId
        }
    }
}

extension Shared.Webhook: Codable {
    enum CodingKeys: String, CodingKey {
        case name
        case url
        case createdAt
        case events
        case id
        case status
        case streamId
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.name = try container.decode(String.self, forKey: .name)
        self.url = try container.decode(String.self, forKey: .url)
        self._createdAt = try container.decodeIfPresent(DecimalSerialized<Double?>.self, forKey: .createdAt) ?? DecimalSerialized<Double?>(wrappedValue: nil)
        self.events = try container.decodeIfPresent([Shared.Events].self, forKey: .events)
        self.id = try container.decodeIfPresent(String.self, forKey: .id)
        self.status = try container.decodeIfPresent(Shared.Status.self, forKey: .status)
        self.streamId = try container.decodeIfPresent(String.self, forKey: .streamId)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.name, forKey: .name)
        try container.encode(self.url, forKey: .url)
        if self.createdAt != nil {
            try container.encode(self._createdAt, forKey: .createdAt)
        }
        try container.encodeIfPresent(self.events, forKey: .events)
        try container.encodeIfPresent(self.id, forKey: .id)
        try container.encodeIfPresent(self.status, forKey: .status)
        try container.encodeIfPresent(self.streamId, forKey: .streamId)
    }
}

extension Shared.Webhook {
    var createdAtWrapper: DecimalSerialized<Double?> {
        return _createdAt
    }
}

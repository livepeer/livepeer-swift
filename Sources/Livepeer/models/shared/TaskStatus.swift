// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// Status of the task
    public struct TaskStatus {
        /// Phase of the task
        public let phase: Shared.TaskPhase
        /// Timestamp (in milliseconds) at which task was updated
        @DecimalSerialized
        public private(set) var updatedAt: Double
        /// Error message if the task failed
        public let errorMessage: String?
        /// Current progress of the task in a 0-1 ratio
        @DecimalSerialized
        public private(set) var progress: Double?
        /// Number of retries done on the task
        @DecimalSerialized
        public private(set) var retries: Double?

        /// Creates an object with the specified parameters
        ///
        /// - Parameter phase: Phase of the task
        /// - Parameter updatedAt: Timestamp (in milliseconds) at which task was updated
        /// - Parameter errorMessage: Error message if the task failed
        /// - Parameter progress: Current progress of the task in a 0-1 ratio
        /// - Parameter retries: Number of retries done on the task
        ///
        public init(phase: Shared.TaskPhase, updatedAt: Double, errorMessage: String? = nil, progress: Double? = nil, retries: Double? = nil) {
            self.phase = phase
            self._updatedAt = DecimalSerialized<Double>(wrappedValue: updatedAt)
            self.errorMessage = errorMessage
            self._progress = DecimalSerialized<Double?>(wrappedValue: progress)
            self._retries = DecimalSerialized<Double?>(wrappedValue: retries)
        }
    }
}

extension Shared.TaskStatus: Codable {
    enum CodingKeys: String, CodingKey {
        case phase
        case updatedAt
        case errorMessage
        case progress
        case retries
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.phase = try container.decode(Shared.TaskPhase.self, forKey: .phase)
        self._updatedAt = try container.decode(DecimalSerialized<Double>.self, forKey: .updatedAt)
        self.errorMessage = try container.decodeIfPresent(String.self, forKey: .errorMessage)
        self._progress = try container.decodeIfPresent(DecimalSerialized<Double?>.self, forKey: .progress) ?? DecimalSerialized<Double?>(wrappedValue: nil)
        self._retries = try container.decodeIfPresent(DecimalSerialized<Double?>.self, forKey: .retries) ?? DecimalSerialized<Double?>(wrappedValue: nil)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.phase, forKey: .phase)
        try container.encode(self._updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(self.errorMessage, forKey: .errorMessage)
        if self.progress != nil {
            try container.encode(self._progress, forKey: .progress)
        }
        if self.retries != nil {
            try container.encode(self._retries, forKey: .retries)
        }
    }
}

extension Shared.TaskStatus {
    var updatedAtWrapper: DecimalSerialized<Double> {
        return _updatedAt
    }
    var progressWrapper: DecimalSerialized<Double?> {
        return _progress
    }
    var retriesWrapper: DecimalSerialized<Double?> {
        return _retries
    }
}

// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// Parameters of the task
    public struct Params {
        public let clip: Shared.Clip?
        /// Parameters for the export task
        public let export: Shared.ExportTaskParams?
        /// Parameters for the export-data task
        public let exportData: Shared.ExportData?
        /// Parameters for the transcode-file task
        public let transcodeFile: Shared.TranscodeFile?
        /// Parameters for the upload task
        public let upload: Shared.Upload?

        /// Creates an object with the specified parameters
        ///
        /// - Parameter export: Parameters for the export task
        /// - Parameter exportData: Parameters for the export-data task
        /// - Parameter transcodeFile: Parameters for the transcode-file task
        /// - Parameter upload: Parameters for the upload task
        ///
        public init(clip: Shared.Clip? = nil, export: Shared.ExportTaskParams? = nil, exportData: Shared.ExportData? = nil, transcodeFile: Shared.TranscodeFile? = nil, upload: Shared.Upload? = nil) {
            self.clip = clip
            self.export = export
            self.exportData = exportData
            self.transcodeFile = transcodeFile
            self.upload = upload
        }
    }
}

extension Shared.Params: Codable {
    enum CodingKeys: String, CodingKey {
        case clip
        case export
        case exportData
        case transcodeFile = "transcode-file"
        case upload
    }
}


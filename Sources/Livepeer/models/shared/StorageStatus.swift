// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// A model object
    public struct StorageStatus {
        /// Phase of the asset storage
        public let phase: Shared.Phase
        public let tasks: Shared.Tasks
        /// Error message if the last storage changed failed.
        public let errorMessage: String?
        /// Current progress of the task updating the storage.
        @DecimalSerialized
        public private(set) var progress: Double?

        /// Creates an object with the specified parameters
        ///
        /// - Parameter phase: Phase of the asset storage
        /// - Parameter errorMessage: Error message if the last storage changed failed.
        /// - Parameter progress: Current progress of the task updating the storage.
        ///
        public init(phase: Shared.Phase, tasks: Shared.Tasks, errorMessage: String? = nil, progress: Double? = nil) {
            self.phase = phase
            self.tasks = tasks
            self.errorMessage = errorMessage
            self._progress = DecimalSerialized<Double?>(wrappedValue: progress)
        }
    }
}

extension Shared.StorageStatus: Codable {
    enum CodingKeys: String, CodingKey {
        case phase
        case tasks
        case errorMessage
        case progress
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.phase = try container.decode(Shared.Phase.self, forKey: .phase)
        self.tasks = try container.decode(Shared.Tasks.self, forKey: .tasks)
        self.errorMessage = try container.decodeIfPresent(String.self, forKey: .errorMessage)
        self._progress = try container.decodeIfPresent(DecimalSerialized<Double?>.self, forKey: .progress) ?? DecimalSerialized<Double?>(wrappedValue: nil)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.phase, forKey: .phase)
        try container.encode(self.tasks, forKey: .tasks)
        try container.encodeIfPresent(self.errorMessage, forKey: .errorMessage)
        if self.progress != nil {
            try container.encode(self._progress, forKey: .progress)
        }
    }
}

extension Shared.StorageStatus {
    var progressWrapper: DecimalSerialized<Double?> {
        return _progress
    }
}

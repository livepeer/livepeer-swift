// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// A model object
    public struct TaskInput {
        public let clip: Shared.Clip?
        /// ID of the input asset
        public let inputAssetId: String?
        /// Output of the task
        public let output: Shared.TaskOutput?
        /// ID of the output asset
        public let outputAssetId: String?
        /// Parameters of the task
        public let params: Shared.Params?
        /// Type of the task
        public let type: Shared.TaskType?

        /// Creates an object with the specified parameters
        ///
        /// - Parameter inputAssetId: ID of the input asset
        /// - Parameter output: Output of the task
        /// - Parameter outputAssetId: ID of the output asset
        /// - Parameter params: Parameters of the task
        /// - Parameter type: Type of the task
        ///
        public init(clip: Shared.Clip? = nil, inputAssetId: String? = nil, output: Shared.TaskOutput? = nil, outputAssetId: String? = nil, params: Shared.Params? = nil, type: Shared.TaskType? = nil) {
            self.clip = clip
            self.inputAssetId = inputAssetId
            self.output = output
            self.outputAssetId = outputAssetId
            self.params = params
            self.type = type
        }
    }
}

extension Shared.TaskInput: Codable {
    enum CodingKeys: String, CodingKey {
        case clip
        case inputAssetId
        case output
        case outputAssetId
        case params
        case type
    }
}


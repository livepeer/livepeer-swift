// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// A model object
    public struct GetRoomUserResponse {
        /// The ID of the user
        public let id: String?
        /// Whether a user is allowed to publish audio/video tracks
        public let isPublisher: Bool?
        /// Timestamp (in milliseconds) at which the user joined
        public let joinedAt: Int?
        /// User defined payload to store for the participant
        public let metadata: String?
        /// The display name of the user
        public let name: String?

        /// Creates an object with the specified parameters
        ///
        /// - Parameter id: The ID of the user
        /// - Parameter isPublisher: Whether a user is allowed to publish audio/video tracks
        /// - Parameter joinedAt: Timestamp (in milliseconds) at which the user joined
        /// - Parameter metadata: User defined payload to store for the participant
        /// - Parameter name: The display name of the user
        ///
        public init(id: String? = nil, isPublisher: Bool? = nil, joinedAt: Int? = nil, metadata: String? = nil, name: String? = nil) {
            self.id = id
            self.isPublisher = isPublisher
            self.joinedAt = joinedAt
            self.metadata = metadata
            self.name = name
        }
    }
}

extension Shared.GetRoomUserResponse: Codable {
    enum CodingKeys: String, CodingKey {
        case id
        case isPublisher
        case joinedAt
        case metadata
        case name
    }
}


// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// Strategy to use for clipping the asset. If not specified, the default strategy that Catalyst is configured for will be used. This field only available for admin users, and is only used for E2E testing.
    public struct ClipStrategy {
        /// End time of the clip in milliseconds
        @DecimalSerialized
        public private(set) var endTime: Double?
        /// Playback ID of the stream or asset to clip
        public let playbackId: String?
        /// Start time of the clip in milliseconds
        @DecimalSerialized
        public private(set) var startTime: Double?

        /// Creates an object with the specified parameters
        ///
        /// - Parameter endTime: End time of the clip in milliseconds
        /// - Parameter playbackId: Playback ID of the stream or asset to clip
        /// - Parameter startTime: Start time of the clip in milliseconds
        ///
        public init(endTime: Double? = nil, playbackId: String? = nil, startTime: Double? = nil) {
            self._endTime = DecimalSerialized<Double?>(wrappedValue: endTime)
            self.playbackId = playbackId
            self._startTime = DecimalSerialized<Double?>(wrappedValue: startTime)
        }
    }
}

extension Shared.ClipStrategy: Codable {
    enum CodingKeys: String, CodingKey {
        case endTime
        case playbackId
        case startTime
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self._endTime = try container.decodeIfPresent(DecimalSerialized<Double?>.self, forKey: .endTime) ?? DecimalSerialized<Double?>(wrappedValue: nil)
        self.playbackId = try container.decodeIfPresent(String.self, forKey: .playbackId)
        self._startTime = try container.decodeIfPresent(DecimalSerialized<Double?>.self, forKey: .startTime) ?? DecimalSerialized<Double?>(wrappedValue: nil)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if self.endTime != nil {
            try container.encode(self._endTime, forKey: .endTime)
        }
        try container.encodeIfPresent(self.playbackId, forKey: .playbackId)
        if self.startTime != nil {
            try container.encode(self._startTime, forKey: .startTime)
        }
    }
}

extension Shared.ClipStrategy {
    var startTimeWrapper: DecimalSerialized<Double?> {
        return _startTime
    }
    var endTimeWrapper: DecimalSerialized<Double?> {
        return _endTime
    }
}

// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// A model object
    public struct Room {
        /// room ID
        public let id: String
        public let participants: [String: Shared.Participants]
        /// Timestamp (in milliseconds) at which the room was created
        @DecimalSerialized
        public private(set) var createdAt: Double?
        /// internal ID for egress output
        public let egressId: String?
        /// Timestamp (in milliseconds) at which room was updated
        @DecimalSerialized
        public private(set) var updatedAt: Double?

        /// Creates an object with the specified parameters
        ///
        /// - Parameter id: room ID
        /// - Parameter createdAt: Timestamp (in milliseconds) at which the room was created
        /// - Parameter egressId: internal ID for egress output
        /// - Parameter updatedAt: Timestamp (in milliseconds) at which room was updated
        ///
        public init(id: String, participants: [String: Shared.Participants], createdAt: Double? = nil, egressId: String? = nil, updatedAt: Double? = nil) {
            self.id = id
            self.participants = participants
            self._createdAt = DecimalSerialized<Double?>(wrappedValue: createdAt)
            self.egressId = egressId
            self._updatedAt = DecimalSerialized<Double?>(wrappedValue: updatedAt)
        }
    }
}

extension Shared.Room: Codable {
    enum CodingKeys: String, CodingKey {
        case id
        case participants
        case createdAt
        case egressId
        case updatedAt
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.id = try container.decode(String.self, forKey: .id)
        self.participants = try container.decode([String: Shared.Participants].self, forKey: .participants)
        self._createdAt = try container.decodeIfPresent(DecimalSerialized<Double?>.self, forKey: .createdAt) ?? DecimalSerialized<Double?>(wrappedValue: nil)
        self.egressId = try container.decodeIfPresent(String.self, forKey: .egressId)
        self._updatedAt = try container.decodeIfPresent(DecimalSerialized<Double?>.self, forKey: .updatedAt) ?? DecimalSerialized<Double?>(wrappedValue: nil)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.id, forKey: .id)
        try container.encode(self.participants, forKey: .participants)
        if self.createdAt != nil {
            try container.encode(self._createdAt, forKey: .createdAt)
        }
        try container.encodeIfPresent(self.egressId, forKey: .egressId)
        if self.updatedAt != nil {
            try container.encode(self._updatedAt, forKey: .updatedAt)
        }
    }
}

extension Shared.Room {
    var createdAtWrapper: DecimalSerialized<Double?> {
        return _createdAt
    }
    var updatedAtWrapper: DecimalSerialized<Double?> {
        return _updatedAt
    }
}

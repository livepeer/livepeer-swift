// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// An individual metric about usage of a user.
    /// 
    public struct UsageMetric {
        /// The creator ID associated with the metric
        public let creatorID: String
        /// The number of minutes of delivery usage
        @DecimalSerialized
        public private(set) var deliveryUsageMins: Double
        /// The number of minutes of storage usage
        @DecimalSerialized
        public private(set) var storageUsageMins: Double
        /// The number of minutes of total usage
        @DecimalSerialized
        public private(set) var totalUsageMins: Double
        /// The user ID associated with the metric
        public let userID: String

        /// Creates an object with the specified parameters
        ///
        /// - Parameter creatorID: The creator ID associated with the metric
        /// - Parameter deliveryUsageMins: The number of minutes of delivery usage
        /// - Parameter storageUsageMins: The number of minutes of storage usage
        /// - Parameter totalUsageMins: The number of minutes of total usage
        /// - Parameter userID: The user ID associated with the metric
        ///
        public init(creatorID: String, deliveryUsageMins: Double, storageUsageMins: Double, totalUsageMins: Double, userID: String) {
            self.creatorID = creatorID
            self._deliveryUsageMins = DecimalSerialized<Double>(wrappedValue: deliveryUsageMins)
            self._storageUsageMins = DecimalSerialized<Double>(wrappedValue: storageUsageMins)
            self._totalUsageMins = DecimalSerialized<Double>(wrappedValue: totalUsageMins)
            self.userID = userID
        }
    }
}

extension Shared.UsageMetric: Codable {
    enum CodingKeys: String, CodingKey {
        case creatorID = "CreatorID"
        case deliveryUsageMins = "DeliveryUsageMins"
        case storageUsageMins = "StorageUsageMins"
        case totalUsageMins = "TotalUsageMins"
        case userID = "UserID"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.creatorID = try container.decode(String.self, forKey: .creatorID)
        self._deliveryUsageMins = try container.decode(DecimalSerialized<Double>.self, forKey: .deliveryUsageMins)
        self._storageUsageMins = try container.decode(DecimalSerialized<Double>.self, forKey: .storageUsageMins)
        self._totalUsageMins = try container.decode(DecimalSerialized<Double>.self, forKey: .totalUsageMins)
        self.userID = try container.decode(String.self, forKey: .userID)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.creatorID, forKey: .creatorID)
        try container.encode(self._deliveryUsageMins, forKey: .deliveryUsageMins)
        try container.encode(self._storageUsageMins, forKey: .storageUsageMins)
        try container.encode(self._totalUsageMins, forKey: .totalUsageMins)
        try container.encode(self.userID, forKey: .userID)
    }
}

extension Shared.UsageMetric {
    var deliveryUsageMinsWrapper: DecimalSerialized<Double> {
        return _deliveryUsageMins
    }
    var totalUsageMinsWrapper: DecimalSerialized<Double> {
        return _totalUsageMins
    }
    var storageUsageMinsWrapper: DecimalSerialized<Double> {
        return _storageUsageMins
    }
}

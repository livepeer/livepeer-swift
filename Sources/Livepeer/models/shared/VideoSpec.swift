// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// Video metadata
    public struct VideoSpec {
        /// Bitrate of the video in bits per second
        @DecimalSerialized
        public private(set) var bitrate: Double?
        /// Duration of the asset in seconds (float)
        @DecimalSerialized
        public private(set) var duration: Double?
        /// Format of the asset
        public let format: String?
        /// List of tracks associated with the asset when the format
        /// contemplates them (e.g. mp4)
        /// 
        public let tracks: [Shared.Tracks]?

        /// Creates an object with the specified parameters
        ///
        /// - Parameter bitrate: Bitrate of the video in bits per second
        /// - Parameter duration: Duration of the asset in seconds (float)
        /// - Parameter format: Format of the asset
        /// - Parameter tracks: List of tracks associated with the asset when the format
        /// contemplates them (e.g. mp4)
        /// 
        ///
        public init(bitrate: Double? = nil, duration: Double? = nil, format: String? = nil, tracks: [Shared.Tracks]? = nil) {
            self._bitrate = DecimalSerialized<Double?>(wrappedValue: bitrate)
            self._duration = DecimalSerialized<Double?>(wrappedValue: duration)
            self.format = format
            self.tracks = tracks
        }
    }
}

extension Shared.VideoSpec: Codable {
    enum CodingKeys: String, CodingKey {
        case bitrate
        case duration
        case format
        case tracks
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self._bitrate = try container.decodeIfPresent(DecimalSerialized<Double?>.self, forKey: .bitrate) ?? DecimalSerialized<Double?>(wrappedValue: nil)
        self._duration = try container.decodeIfPresent(DecimalSerialized<Double?>.self, forKey: .duration) ?? DecimalSerialized<Double?>(wrappedValue: nil)
        self.format = try container.decodeIfPresent(String.self, forKey: .format)
        self.tracks = try container.decodeIfPresent([Shared.Tracks].self, forKey: .tracks)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if self.bitrate != nil {
            try container.encode(self._bitrate, forKey: .bitrate)
        }
        if self.duration != nil {
            try container.encode(self._duration, forKey: .duration)
        }
        try container.encodeIfPresent(self.format, forKey: .format)
        try container.encodeIfPresent(self.tracks, forKey: .tracks)
    }
}

extension Shared.VideoSpec {
    var durationWrapper: DecimalSerialized<Double?> {
        return _duration
    }
    var bitrateWrapper: DecimalSerialized<Double?> {
        return _bitrate
    }
}

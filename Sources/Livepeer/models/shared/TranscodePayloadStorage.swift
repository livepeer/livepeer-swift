// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// A model object
    public enum TranscodePayloadStorage {
        case transcodePayloadSchemas1(Shared.TranscodePayloadSchemas1)
        case transcodePayloadSchemas2(Shared.TranscodePayloadSchemas2)
    }
}

extension Shared.TranscodePayloadStorage: Codable {
    public init(from decoder: Decoder) throws {
        if let value = try? Shared.TranscodePayloadSchemas1(from: decoder) {
            self = .transcodePayloadSchemas1(value)
        } else if let value = try? Shared.TranscodePayloadSchemas2(from: decoder) {
            self = .transcodePayloadSchemas2(value)
        } else {
            throw LivepeerError.failedToHandleResponse(.failedToDecodeResponse)
        }
    }

    public func encode(to encoder: Encoder) throws {
        switch self {
        case .transcodePayloadSchemas1(let value):
            try value.encode(to: encoder)
        case .transcodePayloadSchemas2(let value):
            try value.encode(to: encoder)
        }
    }
}


// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// Transcode API profile
    public struct TranscodeProfile {
        public let bitrate: Int
        public let encoder: Shared.TranscodeProfileEncoder?
        public let fps: Int?
        public let fpsDen: Int?
        public let gop: String?
        public let height: Int?
        public let name: String?
        public let profile: Shared.TranscodeProfileProfile?
        /// Restricts the size of the output video using the constant quality feature. Increasing this value will result in a lower quality video. Note that this parameter might not work if the transcoder lacks support for it.
        /// 
        public let quality: Int?
        public let width: Int?

        /// Creates an object with the specified parameters
        ///
        /// - Parameter quality: Restricts the size of the output video using the constant quality feature. Increasing this value will result in a lower quality video. Note that this parameter might not work if the transcoder lacks support for it.
        /// 
        ///
        public init(bitrate: Int, encoder: Shared.TranscodeProfileEncoder? = nil, fps: Int? = nil, fpsDen: Int? = nil, gop: String? = nil, height: Int? = nil, name: String? = nil, profile: Shared.TranscodeProfileProfile? = nil, quality: Int? = nil, width: Int? = nil) {
            self.bitrate = bitrate
            self.encoder = encoder
            self.fps = fps
            self.fpsDen = fpsDen
            self.gop = gop
            self.height = height
            self.name = name
            self.profile = profile
            self.quality = quality
            self.width = width
        }
    }
}

extension Shared.TranscodeProfile: Codable {
    enum CodingKeys: String, CodingKey {
        case bitrate
        case encoder
        case fps
        case fpsDen
        case gop
        case height
        case name
        case profile
        case quality
        case width
    }
}


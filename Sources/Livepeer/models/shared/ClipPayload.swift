// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// A model object
    public struct ClipPayload {
        /// Playback ID of the stream or asset to clip
        public let playbackId: String
        /// Start time of the clip in milliseconds
        @DecimalSerialized
        public private(set) var startTime: Double
        /// End time of the clip in milliseconds
        @DecimalSerialized
        public private(set) var endTime: Double?
        /// Name of the clip
        public let name: String?
        /// Session ID of the stream to clip
        public let sessionId: String?

        /// Creates an object with the specified parameters
        ///
        /// - Parameter playbackId: Playback ID of the stream or asset to clip
        /// - Parameter startTime: Start time of the clip in milliseconds
        /// - Parameter endTime: End time of the clip in milliseconds
        /// - Parameter name: Name of the clip
        /// - Parameter sessionId: Session ID of the stream to clip
        ///
        public init(playbackId: String, startTime: Double, endTime: Double? = nil, name: String? = nil, sessionId: String? = nil) {
            self.playbackId = playbackId
            self._startTime = DecimalSerialized<Double>(wrappedValue: startTime)
            self._endTime = DecimalSerialized<Double?>(wrappedValue: endTime)
            self.name = name
            self.sessionId = sessionId
        }
    }
}

extension Shared.ClipPayload: Codable {
    enum CodingKeys: String, CodingKey {
        case playbackId
        case startTime
        case endTime
        case name
        case sessionId
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.playbackId = try container.decode(String.self, forKey: .playbackId)
        self._startTime = try container.decode(DecimalSerialized<Double>.self, forKey: .startTime)
        self._endTime = try container.decodeIfPresent(DecimalSerialized<Double?>.self, forKey: .endTime) ?? DecimalSerialized<Double?>(wrappedValue: nil)
        self.name = try container.decodeIfPresent(String.self, forKey: .name)
        self.sessionId = try container.decodeIfPresent(String.self, forKey: .sessionId)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.playbackId, forKey: .playbackId)
        try container.encode(self._startTime, forKey: .startTime)
        if self.endTime != nil {
            try container.encode(self._endTime, forKey: .endTime)
        }
        try container.encodeIfPresent(self.name, forKey: .name)
        try container.encodeIfPresent(self.sessionId, forKey: .sessionId)
    }
}

extension Shared.ClipPayload {
    var startTimeWrapper: DecimalSerialized<Double> {
        return _startTime
    }
    var endTimeWrapper: DecimalSerialized<Double?> {
        return _endTime
    }
}

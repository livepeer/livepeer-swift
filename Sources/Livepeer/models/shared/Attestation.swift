// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// A model object
    public struct Attestation {
        /// Video Metadata EIP-712 domain
        public let domain: Shared.Domain
        /// Video Metadata EIP-712 message content
        public let message: Shared.Message
        /// Video Metadata EIP-712 primaryType
        public let primaryType: Shared.PrimaryType
        /// Video Metadata EIP-712 message signature
        public let signature: String
        /// Timestamp (in milliseconds) at which the object was created
        @DecimalSerialized
        public private(set) var createdAt: Double?
        public let id: String?
        public let signatureType: Shared.SignatureType?
        public let storage: Shared.AttestationStorage?

        /// Creates an object with the specified parameters
        ///
        /// - Parameter domain: Video Metadata EIP-712 domain
        /// - Parameter message: Video Metadata EIP-712 message content
        /// - Parameter primaryType: Video Metadata EIP-712 primaryType
        /// - Parameter signature: Video Metadata EIP-712 message signature
        /// - Parameter createdAt: Timestamp (in milliseconds) at which the object was created
        ///
        public init(domain: Shared.Domain, message: Shared.Message, primaryType: Shared.PrimaryType, signature: String, createdAt: Double? = nil, id: String? = nil, signatureType: Shared.SignatureType? = nil, storage: Shared.AttestationStorage? = nil) {
            self.domain = domain
            self.message = message
            self.primaryType = primaryType
            self.signature = signature
            self._createdAt = DecimalSerialized<Double?>(wrappedValue: createdAt)
            self.id = id
            self.signatureType = signatureType
            self.storage = storage
        }
    }
}

extension Shared.Attestation: Codable {
    enum CodingKeys: String, CodingKey {
        case domain
        case message
        case primaryType
        case signature
        case createdAt
        case id
        case signatureType
        case storage
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.domain = try container.decode(Shared.Domain.self, forKey: .domain)
        self.message = try container.decode(Shared.Message.self, forKey: .message)
        self.primaryType = try container.decode(Shared.PrimaryType.self, forKey: .primaryType)
        self.signature = try container.decode(String.self, forKey: .signature)
        self._createdAt = try container.decodeIfPresent(DecimalSerialized<Double?>.self, forKey: .createdAt) ?? DecimalSerialized<Double?>(wrappedValue: nil)
        self.id = try container.decodeIfPresent(String.self, forKey: .id)
        self.signatureType = try container.decodeIfPresent(Shared.SignatureType.self, forKey: .signatureType)
        self.storage = try container.decodeIfPresent(Shared.AttestationStorage.self, forKey: .storage)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.domain, forKey: .domain)
        try container.encode(self.message, forKey: .message)
        try container.encode(self.primaryType, forKey: .primaryType)
        try container.encode(self.signature, forKey: .signature)
        if self.createdAt != nil {
            try container.encode(self._createdAt, forKey: .createdAt)
        }
        try container.encodeIfPresent(self.id, forKey: .id)
        try container.encodeIfPresent(self.signatureType, forKey: .signatureType)
        try container.encodeIfPresent(self.storage, forKey: .storage)
    }
}

extension Shared.Attestation {
    var createdAtWrapper: DecimalSerialized<Double?> {
        return _createdAt
    }
}

// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// Video Metadata EIP-712 message content
    public struct Message {
        public let attestations: [Shared.Attestations]
        public let signer: String
        @DecimalSerialized
        public private(set) var timestamp: Double
        public let video: String

        /// Creates an object with the specified parameters
        ///
        ///
        public init(attestations: [Shared.Attestations], signer: String, timestamp: Double, video: String) {
            self.attestations = attestations
            self.signer = signer
            self._timestamp = DecimalSerialized<Double>(wrappedValue: timestamp)
            self.video = video
        }
    }
}

extension Shared.Message: Codable {
    enum CodingKeys: String, CodingKey {
        case attestations
        case signer
        case timestamp
        case video
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.attestations = try container.decode([Shared.Attestations].self, forKey: .attestations)
        self.signer = try container.decode(String.self, forKey: .signer)
        self._timestamp = try container.decode(DecimalSerialized<Double>.self, forKey: .timestamp)
        self.video = try container.decode(String.self, forKey: .video)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.attestations, forKey: .attestations)
        try container.encode(self.signer, forKey: .signer)
        try container.encode(self._timestamp, forKey: .timestamp)
        try container.encode(self.video, forKey: .video)
    }
}

extension Shared.Message {
    var timestampWrapper: DecimalSerialized<Double> {
        return _timestamp
    }
}

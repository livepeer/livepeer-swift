// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.


import Foundation

class _TranscodeAPI: TranscodeAPI {
    private let client: Client

    init(client: Client) {
        self.client = client
    }
    
    public func transcode(request: Shared.TaskInput) async throws -> Response<Operations.TranscodeResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureTranscodeRequest(with: configuration, request: request)
            },
            handleResponse: handleTranscodeResponse
        )
    }

}

// MARK: - Request Configuration

private func configureTranscodeRequest(with configuration: URLRequestConfiguration, request: Shared.TaskInput) throws {
    configuration.path = "/transcode"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .userAgent
}

// MARK: - Response Handlers

private func handleTranscodeResponse(response: Client.APIResponse) throws -> Operations.TranscodeResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .task(try JSONDecoder().decode(Shared.Task.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}


// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.


import Foundation

class _MultistreamTargetAPI: MultistreamTargetAPI {
    private let client: Client

    init(client: Client) {
        self.client = client
    }
    
    public func getMultistreamTargets() async throws -> Response<Operations.GetMultistreamTargetsResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureGetMultistreamTargetsRequest(with: configuration)
            },
            handleResponse: handleGetMultistreamTargetsResponse
        )
    }
    
    public func createMultistreamTarget(request: Shared.MultistreamTargetInput) async throws -> Response<Operations.CreateMultistreamTargetResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureCreateMultistreamTargetRequest(with: configuration, request: request)
            },
            handleResponse: handleCreateMultistreamTargetResponse
        )
    }
    
    public func deleteMultistreamTarget(request: Operations.DeleteMultistreamTargetRequest) async throws -> Response<Operations.DeleteMultistreamTargetResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureDeleteMultistreamTargetRequest(with: configuration, request: request)
            },
            handleResponse: handleDeleteMultistreamTargetResponse
        )
    }
    
    public func getMultistreamTarget(request: Operations.GetMultistreamTargetRequest) async throws -> Response<Operations.GetMultistreamTargetResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureGetMultistreamTargetRequest(with: configuration, request: request)
            },
            handleResponse: handleGetMultistreamTargetResponse
        )
    }
    
    public func updateMultistreamTarget(request: Operations.UpdateMultistreamTargetRequest) async throws -> Response<Operations.UpdateMultistreamTargetResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureUpdateMultistreamTargetRequest(with: configuration, request: request)
            },
            handleResponse: handleUpdateMultistreamTargetResponse
        )
    }

}

// MARK: - Request Configuration

private func configureGetMultistreamTargetsRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/multistream/target"
    configuration.method = .get
    configuration.telemetryHeader = .userAgent
}

private func configureCreateMultistreamTargetRequest(with configuration: URLRequestConfiguration, request: Shared.MultistreamTargetInput) throws {
    configuration.path = "/multistream/target"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .userAgent
}

private func configureDeleteMultistreamTargetRequest(with configuration: URLRequestConfiguration, request: Operations.DeleteMultistreamTargetRequest) throws {
    configuration.path = "/multistream/target/{id}"
    configuration.method = .delete
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureGetMultistreamTargetRequest(with configuration: URLRequestConfiguration, request: Operations.GetMultistreamTargetRequest) throws {
    configuration.path = "/multistream/target/{id}"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureUpdateMultistreamTargetRequest(with configuration: URLRequestConfiguration, request: Operations.UpdateMultistreamTargetRequest) throws {
    configuration.path = "/multistream/target/{id}"
    configuration.method = .patch
    configuration.pathParameterSerializable = request
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request.multistreamTargetPatchPayload)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .userAgent
}

// MARK: - Response Handlers

private func handleGetMultistreamTargetsResponse(response: Client.APIResponse) throws -> Operations.GetMultistreamTargetsResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .classes(try JSONDecoder().decode([Shared.MultistreamTarget].self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleCreateMultistreamTargetResponse(response: Client.APIResponse) throws -> Operations.CreateMultistreamTargetResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 201 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .classes(try JSONDecoder().decode([Shared.MultistreamTarget].self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleDeleteMultistreamTargetResponse(response: Client.APIResponse) throws -> Operations.DeleteMultistreamTargetResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 204 { 
        return .empty
    }

    return .empty
}

private func handleGetMultistreamTargetResponse(response: Client.APIResponse) throws -> Operations.GetMultistreamTargetResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .multistreamTarget(try JSONDecoder().decode(Shared.MultistreamTarget.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleUpdateMultistreamTargetResponse(response: Client.APIResponse) throws -> Operations.UpdateMultistreamTargetResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 204 { 
        return .empty
    }

    return .empty
}


// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.


import Foundation

class _StreamAPI: StreamAPI {
    private let client: Client

    init(client: Client) {
        self.client = client
    }
    
    public func getAll(request: Operations.GetAllRequest) async throws -> Response<Operations.GetAllResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureGetAllRequest(with: configuration, request: request)
            },
            handleResponse: handleGetAllResponse
        )
    }
    
    public func create(request: Shared.NewStreamPayload) async throws -> Response<Operations.CreateResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureCreateRequest(with: configuration, request: request)
            },
            handleResponse: handleCreateResponse
        )
    }
    
    public func delete(request: Operations.DeleteRequest) async throws -> Response<Operations.DeleteResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureDeleteRequest(with: configuration, request: request)
            },
            handleResponse: handleDeleteResponse
        )
    }
    
    public func get(request: Operations.GetRequest) async throws -> Response<Operations.GetResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureGetRequest(with: configuration, request: request)
            },
            handleResponse: handleGetResponse
        )
    }
    
    public func update(request: Operations.UpdateRequest) async throws -> Response<Operations.UpdateResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureUpdateRequest(with: configuration, request: request)
            },
            handleResponse: handleUpdateResponse
        )
    }
    
    public func createClip(request: Shared.ClipPayload) async throws -> Response<Operations.CreateClipResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureCreateClipRequest(with: configuration, request: request)
            },
            handleResponse: handleCreateClipResponse
        )
    }
    
    public func getAllClips(request: Operations.GetAllClipsRequest) async throws -> Response<Operations.GetAllClipsResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureGetAllClipsRequest(with: configuration, request: request)
            },
            handleResponse: handleGetAllClipsResponse
        )
    }

}

// MARK: - Request Configuration

private func configureGetAllRequest(with configuration: URLRequestConfiguration, request: Operations.GetAllRequest) throws {
    configuration.path = "/stream"
    configuration.method = .get
    configuration.queryParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureCreateRequest(with configuration: URLRequestConfiguration, request: Shared.NewStreamPayload) throws {
    configuration.path = "/stream"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .userAgent
}

private func configureDeleteRequest(with configuration: URLRequestConfiguration, request: Operations.DeleteRequest) throws {
    configuration.path = "/stream/{id}"
    configuration.method = .delete
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureGetRequest(with configuration: URLRequestConfiguration, request: Operations.GetRequest) throws {
    configuration.path = "/stream/{id}"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureUpdateRequest(with configuration: URLRequestConfiguration, request: Operations.UpdateRequest) throws {
    configuration.path = "/stream/{id}"
    configuration.method = .patch
    configuration.pathParameterSerializable = request
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request.streamPatchPayload)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .userAgent
}

private func configureCreateClipRequest(with configuration: URLRequestConfiguration, request: Shared.ClipPayload) throws {
    configuration.path = "/clip"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .userAgent
}

private func configureGetAllClipsRequest(with configuration: URLRequestConfiguration, request: Operations.GetAllClipsRequest) throws {
    configuration.path = "/stream/{id}/clips"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

// MARK: - Response Handlers

private func handleGetAllResponse(response: Client.APIResponse) throws -> Operations.GetAllResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .classes(try JSONDecoder().decode([Shared.Stream].self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleCreateResponse(response: Client.APIResponse) throws -> Operations.CreateResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .classes(try JSONDecoder().decode([Shared.Stream].self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleDeleteResponse(response: Client.APIResponse) throws -> Operations.DeleteResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 204 { 
        return .empty
    }

    return .empty
}

private func handleGetResponse(response: Client.APIResponse) throws -> Operations.GetResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .stream(try JSONDecoder().decode(Shared.Stream.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleUpdateResponse(response: Client.APIResponse) throws -> Operations.UpdateResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 204 { 
        return .empty
    }

    return .empty
}

private func handleCreateClipResponse(response: Client.APIResponse) throws -> Operations.CreateClipResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .object(try JSONDecoder().decode(Operations.CreateClipResponseBody.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleGetAllClipsResponse(response: Client.APIResponse) throws -> Operations.GetAllClipsResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .classes(try JSONDecoder().decode([Shared.Asset].self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}


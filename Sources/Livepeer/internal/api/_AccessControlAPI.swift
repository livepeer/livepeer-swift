// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.


import Foundation

class _AccessControlAPI: AccessControlAPI {
    private let client: Client

    init(client: Client) {
        self.client = client
    }
    
    public func getSigningKeys() async throws -> Response<Operations.GetSigningKeysResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureGetSigningKeysRequest(with: configuration)
            },
            handleResponse: handleGetSigningKeysResponse
        )
    }
    
    public func createSigningKey() async throws -> Response<Operations.CreateSigningKeyResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureCreateSigningKeyRequest(with: configuration)
            },
            handleResponse: handleCreateSigningKeyResponse
        )
    }
    
    public func deleteSigningKey(request: Operations.DeleteSigningKeyRequest) async throws -> Response<Operations.DeleteSigningKeyResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureDeleteSigningKeyRequest(with: configuration, request: request)
            },
            handleResponse: handleDeleteSigningKeyResponse
        )
    }
    
    public func getSigningKey(request: Operations.GetSigningKeyRequest) async throws -> Response<Operations.GetSigningKeyResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureGetSigningKeyRequest(with: configuration, request: request)
            },
            handleResponse: handleGetSigningKeyResponse
        )
    }
    
    public func updateSigningKey(request: Operations.UpdateSigningKeyRequest) async throws -> Response<Operations.UpdateSigningKeyResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureUpdateSigningKeyRequest(with: configuration, request: request)
            },
            handleResponse: handleUpdateSigningKeyResponse
        )
    }

}

// MARK: - Request Configuration

private func configureGetSigningKeysRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/access-control/signing-key"
    configuration.method = .get
    configuration.telemetryHeader = .userAgent
}

private func configureCreateSigningKeyRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/access-control/signing-key"
    configuration.method = .post
    configuration.telemetryHeader = .userAgent
}

private func configureDeleteSigningKeyRequest(with configuration: URLRequestConfiguration, request: Operations.DeleteSigningKeyRequest) throws {
    configuration.path = "/access-control/signing-key/{keyId}"
    configuration.method = .delete
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureGetSigningKeyRequest(with configuration: URLRequestConfiguration, request: Operations.GetSigningKeyRequest) throws {
    configuration.path = "/access-control/signing-key/{keyId}"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureUpdateSigningKeyRequest(with configuration: URLRequestConfiguration, request: Operations.UpdateSigningKeyRequest) throws {
    configuration.path = "/access-control/signing-key/{keyId}"
    configuration.method = .patch
    configuration.pathParameterSerializable = request
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request.requestBody)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .userAgent
}

// MARK: - Response Handlers

private func handleGetSigningKeysResponse(response: Client.APIResponse) throws -> Operations.GetSigningKeysResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .classes(try JSONDecoder().decode([Shared.SigningKey].self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleCreateSigningKeyResponse(response: Client.APIResponse) throws -> Operations.CreateSigningKeyResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .signingKeyResponsePayload(try JSONDecoder().decode(Shared.SigningKeyResponsePayload.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleDeleteSigningKeyResponse(response: Client.APIResponse) throws -> Operations.DeleteSigningKeyResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 204 { 
        return .empty
    }

    return .empty
}

private func handleGetSigningKeyResponse(response: Client.APIResponse) throws -> Operations.GetSigningKeyResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .signingKey(try JSONDecoder().decode(Shared.SigningKey.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleUpdateSigningKeyResponse(response: Client.APIResponse) throws -> Operations.UpdateSigningKeyResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 204 { 
        return .empty
    }

    return .empty
}


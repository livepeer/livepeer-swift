// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.


import Foundation

class _RoomAPI: RoomAPI {
    private let client: Client

    init(client: Client) {
        self.client = client
    }
    
    public func createRoom() async throws -> Response<Operations.CreateRoomResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureCreateRoomRequest(with: configuration)
            },
            handleResponse: handleCreateRoomResponse
        )
    }
    
    public func deleteRoom(request: Operations.DeleteRoomRequest) async throws -> Response<Operations.DeleteRoomResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureDeleteRoomRequest(with: configuration, request: request)
            },
            handleResponse: handleDeleteRoomResponse
        )
    }
    
    public func getRoom(request: Operations.GetRoomRequest) async throws -> Response<Operations.GetRoomResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureGetRoomRequest(with: configuration, request: request)
            },
            handleResponse: handleGetRoomResponse
        )
    }
    
    public func stopRoomEgress(request: Operations.StopRoomEgressRequest) async throws -> Response<Operations.StopRoomEgressResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureStopRoomEgressRequest(with: configuration, request: request)
            },
            handleResponse: handleStopRoomEgressResponse
        )
    }
    
    public func startRoomEgress(request: Operations.StartRoomEgressRequest) async throws -> Response<Operations.StartRoomEgressResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureStartRoomEgressRequest(with: configuration, request: request)
            },
            handleResponse: handleStartRoomEgressResponse
        )
    }
    
    public func createRoomUser(request: Operations.CreateRoomUserRequest) async throws -> Response<Operations.CreateRoomUserResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureCreateRoomUserRequest(with: configuration, request: request)
            },
            handleResponse: handleCreateRoomUserResponse
        )
    }
    
    public func deleteRoomUser(request: Operations.DeleteRoomUserRequest) async throws -> Response<Operations.DeleteRoomUserResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureDeleteRoomUserRequest(with: configuration, request: request)
            },
            handleResponse: handleDeleteRoomUserResponse
        )
    }
    
    public func getRoomUserDetails(request: Operations.GetRoomUserDetailsRequest) async throws -> Response<Operations.GetRoomUserDetailsResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureGetRoomUserDetailsRequest(with: configuration, request: request)
            },
            handleResponse: handleGetRoomUserDetailsResponse
        )
    }
    
    public func updateRoomUserDetails(request: Operations.UpdateRoomUserDetailsRequest) async throws -> Response<Operations.UpdateRoomUserDetailsResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureUpdateRoomUserDetailsRequest(with: configuration, request: request)
            },
            handleResponse: handleUpdateRoomUserDetailsResponse
        )
    }

}

// MARK: - Request Configuration

private func configureCreateRoomRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/room"
    configuration.method = .post
    configuration.telemetryHeader = .userAgent
}

private func configureDeleteRoomRequest(with configuration: URLRequestConfiguration, request: Operations.DeleteRoomRequest) throws {
    configuration.path = "/room/{id}"
    configuration.method = .delete
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureGetRoomRequest(with configuration: URLRequestConfiguration, request: Operations.GetRoomRequest) throws {
    configuration.path = "/room/{id}"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureStopRoomEgressRequest(with configuration: URLRequestConfiguration, request: Operations.StopRoomEgressRequest) throws {
    configuration.path = "/room/{id}/egress"
    configuration.method = .delete
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureStartRoomEgressRequest(with configuration: URLRequestConfiguration, request: Operations.StartRoomEgressRequest) throws {
    configuration.path = "/room/{id}/egress"
    configuration.method = .post
    configuration.pathParameterSerializable = request
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request.roomEgressPayload)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .userAgent
}

private func configureCreateRoomUserRequest(with configuration: URLRequestConfiguration, request: Operations.CreateRoomUserRequest) throws {
    configuration.path = "/room/{id}/user"
    configuration.method = .post
    configuration.pathParameterSerializable = request
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request.roomUserPayload)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .userAgent
}

private func configureDeleteRoomUserRequest(with configuration: URLRequestConfiguration, request: Operations.DeleteRoomUserRequest) throws {
    configuration.path = "/room/{id}/user/{userId}"
    configuration.method = .delete
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureGetRoomUserDetailsRequest(with configuration: URLRequestConfiguration, request: Operations.GetRoomUserDetailsRequest) throws {
    configuration.path = "/room/{id}/user/{userId}"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureUpdateRoomUserDetailsRequest(with configuration: URLRequestConfiguration, request: Operations.UpdateRoomUserDetailsRequest) throws {
    configuration.path = "/room/{id}/user/{userId}"
    configuration.method = .put
    configuration.pathParameterSerializable = request
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request.roomUserUpdatePayload)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .userAgent
}

// MARK: - Response Handlers

private func handleCreateRoomResponse(response: Client.APIResponse) throws -> Operations.CreateRoomResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .createRoomResponse(try JSONDecoder().decode(Shared.CreateRoomResponse.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleDeleteRoomResponse(response: Client.APIResponse) throws -> Operations.DeleteRoomResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 204 { 
        return .empty
    }

    return .empty
}

private func handleGetRoomResponse(response: Client.APIResponse) throws -> Operations.GetRoomResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .room(try JSONDecoder().decode(Shared.Room.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleStopRoomEgressResponse(response: Client.APIResponse) throws -> Operations.StopRoomEgressResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 204 { 
        return .empty
    }

    return .empty
}

private func handleStartRoomEgressResponse(response: Client.APIResponse) throws -> Operations.StartRoomEgressResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 204 { 
        return .empty
    }

    return .empty
}

private func handleCreateRoomUserResponse(response: Client.APIResponse) throws -> Operations.CreateRoomUserResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 201 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .roomUserResponse(try JSONDecoder().decode(Shared.RoomUserResponse.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleDeleteRoomUserResponse(response: Client.APIResponse) throws -> Operations.DeleteRoomUserResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 204 { 
        return .empty
    }

    return .empty
}

private func handleGetRoomUserDetailsResponse(response: Client.APIResponse) throws -> Operations.GetRoomUserDetailsResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .getRoomUserResponse(try JSONDecoder().decode(Shared.GetRoomUserResponse.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleUpdateRoomUserDetailsResponse(response: Client.APIResponse) throws -> Operations.UpdateRoomUserDetailsResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 204 { 
        return .empty
    }

    return .empty
}


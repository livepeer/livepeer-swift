// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.


import Foundation

class _TaskAPI: TaskAPI {
    private let client: Client

    init(client: Client) {
        self.client = client
    }
    
    public func getTasks() async throws -> Response<Operations.GetTasksResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureGetTasksRequest(with: configuration)
            },
            handleResponse: handleGetTasksResponse
        )
    }
    
    public func getTask(request: Operations.GetTaskRequest) async throws -> Response<Operations.GetTaskResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureGetTaskRequest(with: configuration, request: request)
            },
            handleResponse: handleGetTaskResponse
        )
    }

}

// MARK: - Request Configuration

private func configureGetTasksRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/task"
    configuration.method = .get
    configuration.telemetryHeader = .userAgent
}

private func configureGetTaskRequest(with configuration: URLRequestConfiguration, request: Operations.GetTaskRequest) throws {
    configuration.path = "/task/{taskId}"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

// MARK: - Response Handlers

private func handleGetTasksResponse(response: Client.APIResponse) throws -> Operations.GetTasksResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .classes(try JSONDecoder().decode([Shared.Task].self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleGetTaskResponse(response: Client.APIResponse) throws -> Operations.GetTaskResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .task(try JSONDecoder().decode(Shared.Task.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}


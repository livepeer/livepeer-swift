// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.


import Foundation

class _SessionAPI: SessionAPI {
    private let client: Client

    init(client: Client) {
        self.client = client
    }
    
    public func getSessions() async throws -> Response<Operations.GetSessionsResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureGetSessionsRequest(with: configuration)
            },
            handleResponse: handleGetSessionsResponse
        )
    }
    
    public func getSession(request: Operations.GetSessionRequest) async throws -> Response<Operations.GetSessionResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureGetSessionRequest(with: configuration, request: request)
            },
            handleResponse: handleGetSessionResponse
        )
    }
    
    public func getRecordedSessions(request: Operations.GetRecordedSessionsRequest) async throws -> Response<Operations.GetRecordedSessionsResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureGetRecordedSessionsRequest(with: configuration, request: request)
            },
            handleResponse: handleGetRecordedSessionsResponse
        )
    }

}

// MARK: - Request Configuration

private func configureGetSessionsRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/session"
    configuration.method = .get
    configuration.telemetryHeader = .userAgent
}

private func configureGetSessionRequest(with configuration: URLRequestConfiguration, request: Operations.GetSessionRequest) throws {
    configuration.path = "/session/{id}"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

private func configureGetRecordedSessionsRequest(with configuration: URLRequestConfiguration, request: Operations.GetRecordedSessionsRequest) throws {
    configuration.path = "/stream/{parentId}/sessions"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.queryParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

// MARK: - Response Handlers

private func handleGetSessionsResponse(response: Client.APIResponse) throws -> Operations.GetSessionsResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .classes(try JSONDecoder().decode([Shared.Session].self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleGetSessionResponse(response: Client.APIResponse) throws -> Operations.GetSessionResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .session(try JSONDecoder().decode(Shared.Session.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleGetRecordedSessionsResponse(response: Client.APIResponse) throws -> Operations.GetRecordedSessionsResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .classes(try JSONDecoder().decode([Shared.Session].self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}


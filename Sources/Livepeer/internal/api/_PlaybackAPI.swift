// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.


import Foundation

class _PlaybackAPI: PlaybackAPI {
    private let client: Client

    init(client: Client) {
        self.client = client
    }
    
    public func getPlaybackInfo(request: Operations.GetPlaybackInfoRequest) async throws -> Response<Operations.GetPlaybackInfoResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureGetPlaybackInfoRequest(with: configuration, request: request)
            },
            handleResponse: handleGetPlaybackInfoResponse
        )
    }

}

// MARK: - Request Configuration

private func configureGetPlaybackInfoRequest(with configuration: URLRequestConfiguration, request: Operations.GetPlaybackInfoRequest) throws {
    configuration.path = "/playback/{id}"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .userAgent
}

// MARK: - Response Handlers

private func handleGetPlaybackInfoResponse(response: Client.APIResponse) throws -> Operations.GetPlaybackInfoResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .playbackInfo(try JSONDecoder().decode(Shared.PlaybackInfo.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if httpResponse.statusCode == 404 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .error(try JSONDecoder().decode(Shared.Error.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

